# Ways to loop, transform and misc. methods

Let's close things out with a few odds and ends that might be useful to know about.

Grouping:

This is one of my favorites. Remember how you would query all the user types, then loop over them and gather each set of users so you could make nice reports with the proper heading? Forget all that: 

`dump( collect([

    ['name' => 'Jeff', 'type' => 'programmer'],

    ['name' => 'Gerry', 'type' => 'designer'],

    ['name' => 'Joe', 'type' => 'programmer'],

])->groupBy('type') ); `

Looping:

`each(callable $callback)` - this works very much like the javascript version of its name. Instead of creating a loop with 

`foreach ($collection as $item){
    
    // do something
    
}`

we can call it in a more mapping fashion, including chaining:

`
collect([1, 12, 32, 14, 5])->sort()->each( function($item, $key){

    echo $item . '-';

}); `

Another interesting option is `every()`, which allows you to make a subset of the collection:

`dump( collect([1,2,3,4,5])->every(2,1) );`

`yields an array(2,4) `


Pagination:

Laravel has a wonderful set of pagination functions that work with the QueryBuilder and Eloquent. That said, there are times when you may wish to use Illuminate\\Pagination\\Paginator to create your own paginator. Most likely you will still want to add limits and offsets to your query, but occasionally you may prefer to cache a complex resultset and slice it. `forPage($page, $perPage)` use array_slice() but helps you by automatically calculating the lenths and offsets so you can just work with clean code. 

`take($limit)` also uses array_slice(), but in a simpler form to simply bring back the requested number of items. Use a negative $limit to grab from the end.

`forget($keys)` will simply `unset()` the keys from the original collection. If you need to preserve the original, be sure to call this on a copy.


Transformation:

These functions are for "brute force" collection of all the values present, whether a single level deep or multi-dimensional. I imagine their greatest use would be in searching or tracing through a complex multi-level hierarchy.

`collapse()` - turns a collection of arrays into a single collection of all values.

`flatten()` - like `collapse()`, but works on multi-dimensional coleections.

`zip($items)` - will array merge on keys; i.e., 

`collect( [1,2,3] )->zip( [4,5,6] );`

`Results: array( array(1,4), array(2,5), array(3,6) ) `

`transform(callable $callback)` - this is just like `map()`, with the diffeence being that `map()` returns a new collection with the callback results, but `transform()` actually applies them to the original collection.