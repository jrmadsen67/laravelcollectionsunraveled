# What are collections? 

Just what *are* Laravel Collections, after all? They're *sort of* like Arrays, in that you can add, remove and iterate over the contents. The documentation calls them "convenient wrappers". They have all these extra functions - and you can chain them!

In fact, looking at the Illuminate\\Support\\Collection class itself gives us the answer - "class Collection implements ArrayAccess". An [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php) is an interface used primarily to define an [ArrayObject](http://php.net/manual/en/class.arrayobject.php). An ArrayObject is the actual class you build and work with. The best definition and examples of these two terms I could find comes from the inestimable Lorna Jane Mitchell's article [ArrayAccess vs ArrayObject](http://www.lornajane.net/posts/2011/arrayaccess-vs-arrayobject). Please give it a quick read - it is short, does a great job, and I'm going to reference her second example later in this chapter. So - if you haven't figured it out yet - a Collection is a custom ArrayObject, implementing ArrayAccess and some other interfaces in much the same way.

Let's look at those and have a quick review of what they do so we can better understand the functions themselves when we get to them. If you haven't already, open class Collection Illuminate\\Support\\Collection. You'll see it implements: ArrayAccess, Countable, IteratorAggregate, JsonSerializable, Arrayable, and Jsonable.  

ArrayAccess - this is what makes a class behave like an array. It forces methods offsetExists(), offsetGet(), offsetSet(), offsetUnset(). You'll see those four methods near the bottom of the class file. As a matter of fact, you'll see the exact same thing in the PrettyBasket class from Lorna Jane Mitchell's article - which is why I recommended you read it.

[Countable](http://php.net/manual/en/class.countable.php) - that other well-known function, count(), comes from here. In PHP, arrays don't actually implement this interface - that's why you don't see $myArray->count(). Our ArrayObject, however, has included it.

[IteratorAggregate](http://php.net/manual/en/class.iteratoraggregate.php) - has the function getIterator() and is what lets us iterate over private properties of our objects. For example, in the manual's myData class example, if you removed the IteratorAggregate implementation you would still be able to foreach over the properties. However, if you made them *private* you would not. Implementing this interface gives us that access.

Finally, we have JsonSerializable and Laravel's own Arrayable and Jsonable. These interface's allow us to switch back and forth between json and array style output.

So what do we have at this point? Our own custom ArrayObject class that allows array-like access to items (corresponding to elements in an actual array), can add and remove items, can count how many items it holds, can traverse those items, and can return those items in array or json format. Notice, also, that these items are stored and operated on internally as an array. 

One thing we do NOT have, however - is a resultset. People often comment on my Collections tips, asking "why not just use a WHERE clause" or other sql solutions. That might be a better solution under certain circumstances, but a Collection is not just a fancy wrapper for a database resultset. You may not even have access to the actual sql, such as when parsing an expensive API response, or you may wish to use these functions for your own internal data processing. So these methods should be looked at in a wider context.  

Now we are ready to start looking at the class functions.


